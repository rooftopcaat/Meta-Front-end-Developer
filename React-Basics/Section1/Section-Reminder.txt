# 모듈, 내보내기, 가져오기 (react의 구동원리 기초)

function addTwo(a, b) {
    console.log(a + b);
}

1. 기본 내보내기 사용 export default

export default function addTwo(a, b) {
    console.log(a + b);
}

function addTwo(a, b) {
    console.log(a + b);
}

export default addTwo;

2. 명명된 내보내기 사용 지정된 특정 부분만 내보냄

기본 내보내기는 하나만 가능하지만 명명 내보내기는 원하는 만큼 가능

export function addTwo(a, b) {
    console.log(a + b);
}

export function addThree(a, b, c) {
    console.log(a + b + c);
}

대체 방법

function addTwo(a, b) {
    console.log(a + b);
}

function addThree(a, b, c) {
    console.log(a + b + c);
}

export { addTwo, addThree };

3. 가져오기

import addTwo from './addTwo.js';


# 자바스크립트와 react

react는 자바스크립트의 모듈러 프로그래밍 기능을 활용해 각 컴포넌트를 별도파일로 분리하고

import, export문을 사용해 서로 통신하게 할 수 있다.

# Props

props는 컴포넌트에 데이터를 전달할 때 사용하는 객체이다.

html 태그 속성 설정이나 js 함수에 파라미터를 전달하는 것과 같은 원리이다.

1. 부모 컴포넌트에서 자식 컴포넌트를 호출할 때, JSX 태그의 속성으로 데이터를 넘겨준다. 
    예를 들어, `<App title="Hello World" />`와 같이 사용할 수 있다.
   
2. 자식 컴포넌트에서는 함수의 파라미터를 통해 props를 받아올 수 있다. 
    예를 들면, `function App(props) { return <h1>{props.title}</h1>; }`와 같이 사용할 수 있다.

# Props의 한계
- 단방향 데이터 흐름: Props는 부모에서 자식으로만 데이터를 전달할 수 있어서, 자식에서 부모로의 직접적인 데이터 전달은 할 수 없다.
- Props 수정 불가: Props는 읽기 전용이기 때문에, 컴포넌트 내부에서 props를 수정하는 것은 불가능하다. 
    이는 리액트의 순수 함수 개념과 관련이 있다. 컴포넌트는 동일한 props로 호출될 때마다 동일한 결과를 반환해야 하기 때문이다.

# Props 사용 예제

