# 모듈

필요할 때마다 새로운 코드를 작성하는 건 비효율적이다.

자바스크립트에서는 ES6 버전부터 모듈이라는 개념을 도입해서, 필요한 코드를 재사용할 수 있게 됐다.

모듈이란, 재사용 가능한 독립된 코드 단위다.

프로그램에 모듈을 추가, 제거, 교체하는 게 가능하다.

모듈 등장 이전의 JS는 간단한 프로젝트에는 유용했지만, 서드 파티 라이브러리나 여러 개발자들이 참여할 때 문제가 발생했다.

예를 들어, 한 스크립트의 전역 함수가 같은 변수 이름을 사용하는 다른 스크립트의 함수를 덮어쓸 수 있었다.

이 문제를 우회하기 위한 기술들이 개발되긴 했지만 완벽하지 않았다.

ES6 모듈이 어떻게 작동하는지 이해하려면, HTML의 script 태그로 돌아가 봐야 한다.

script 태그에는 타입 속성이 있는데, 이는 태그가 포함하고 있는 콘텐츠의 유형을 식별한다.

자바스크립트의 경우, script type="text/javascript"이라고 써야 한다.

하지만 타입 속성을 생략하고 기본 script 태그를 사용해도, 타입은 기본적으로 text/javascript로 설정된다.

# DOM

DOM은 JavaScript 객체 형태로, 페이지의 다양한 부분을 대표하는 중첩된 객체들로 이루어져 있다.

이 객체들은 전체 HTML 파일을 트리 구조로 매핑한다. 브라우저는 웹페이지를 다운로드할 때마다 자동으로 DOM을 만든다.

예를 들어, 브라우저의 주소창에 URL을 입력하면, 브라우저는 그 도메인에 존재하는 웹페이지를 가져온다.

그리고 브라우저가 서버에 연결되어 페이지를 다운로드하면, 모든 HTML 코드를 메모리에 저장하고 다운로드한 페이지를 보여준다.

그리고 그 웹페이지의 DOM, 즉 브라우저가 방금 다운로드한 HTML 문서의 모델을 만든다.

개발자로서, 페이지의 DOM과 상호작용하여 웹페이지를 변경할 수 있는데, DOM과 상호작용하려면 브라우저의 개발자 도구 내의 Elements 탭을 사용할 수 있다.

# JavaScript DOM 조작

자바스크립트 객체는 document 객체의 프로퍼티로, 웹페이지의 DOM을 조작하는 데 사용된다.

querySelector()로 특정 요소를 찾을 수 있다.

document.querySelector('h1')은 첫 번째 h1 요소를 반환한다.

document.querySelectorAll('p')은 모든 p 요소를 반환한다.

document.getElementById('heading')은 id가 heading인 요소를 반환한다.

document.getElementsByClassName('txt')은 class가 txt인 요소를 반환한다.

ID에는 'element'가 단수형이고 클래스 이름에는 복수형이라는 것을 기억하는 게 중요하다.

또, 찾고 있는 요소를 찾을 수 없는 경우에는 ID의 경우 'null'을, 클래스 이름의 경우 빈 컬렉션(대괄호로 표시됨)을 반환한다.

# 이벤트 처리

버튼 클릭, 마우스 오버, 키보드 입력 등의 이벤트를 감지하기 위해, 자바스크립트는 이벤트 리스너를 사용한다.

이벤트 리스너는 특정 이벤트가 발생했을 때 실행할 코드를 지정한다.

body 클릭 이벤트를 듣고 싶다고 가정한다면, document.querySelector('body')로 body 요소를 찾는다.

이후 const target = document.querySelector('body')로 target 변수에 body 요소를 할당한다.

이제 이 'target'이 클릭될 때 실행될 함수를 만들 수 있다.

target.addEventListener('click', function() {
  console.log('body was clicked');
});

더 세부적으로, handleClick2라는 두 번째 함수를 만들고, div 요소의 h1요소를 우클릭하고 'Edit as HTML'을 클릭한다.

그리고 h1 태그 뒤에 onclick="handleClick2()"를 추가한다.

이제 h1을 클릭하면 handleClick2 함수가 실행된다.

# JSON

JSON 문자열 객체 간 변환

JSON은 문자열 형태로 표현된 객체이기 때문에 다시 JavaScript 객체로 변환해서 속성이나 메소드를 사용하기 편하게 하는 경우가 많다.

여기서 parse메서드를 사용한다.

특정 변수에 저장한 후에, `JSON.parse(변수명)`을 실행해 반환한다.

반대의 경우엔, stringify메서드를 사용한다.

API에서 데이터를 가져올 때 JSON 문자열을 JavaScript 객체로 변환하는 건 굉장히 일반적인 작업이고,

이렇게 하면 객체의 속성에 프로그래밍 방식으로 쉽게 접근할 수 있다.


