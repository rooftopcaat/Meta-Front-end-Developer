# 테스팅

1. **종단 간(E2E) 테스팅**: 이 방법은 실제 사용자 환경을 모방하여 소프트웨어의 전체적인 기능을 테스트한다. 

E2E 테스트는 설정과 실행에 상대적으로 많은 시간이 소요되지만, 사용자 경험과 관련된 오류를 포착하는 데 효과적이다.

2. **통합 테스팅**: 소프트웨어의 다양한 모듈이나 구성 요소가 서로 올바르게 통합되어 작동하는지 검증하는 과정이다. 

통합 테스팅은 E2E 테스팅보다는 빠르고 비용이 적게 들지만, 단위 테스팅보다는 덜 효율적이다. 

통합 테스팅을 통해 모듈 간의 인터페이스 및 데이터 흐름 관련 오류를 식별할 수 있다.

3. **단위 테스팅**: 소프트웨어의 가장 작은 단위, 예를 들어 함수나 메소드를 개별적으로 테스트하는 방법이다. 

단위 테스팅은 소프트웨어의 기본적인 빌딩 블록을 검증하며, 실행 속도가 빠르고 테스트 케이스 작성이 비교적 간단하다는 장점이 있다. 이러한 테스트는 일반적으로 개발 초기 단계에서 많이 사용되며, 소프트웨어의 안정성을 기초부터 확보하는 데 도움이 된다.

단위 테스팅은 테스트 피라미드의 기반을 형성하며 속도가 가장 빠르고 비용이 가장 적게 든다. 

통합 테스팅은 중간 수준의 속도와 비용을 요구하며, 

E2E 테스팅은 가장 느리고 비용이 많이 드는 테스트 방법으로, 피라미드의 정상에 위치한다.

# JEST

JavaScirpt에는 테스트를 위한 내장 기능이 없기에 JEST 프레임워크를 사용한다.

React, babel, typescript, node, angular, vue 등에도 사용가능.

코드 커버리지 : 코드 커버리지는 내 코드 중 얼마나 많은 부분이 테스트로 커버되는지를 나타내는 지표다.

예를 들어, 80% 코드 커버리지라고 하면, 전체 코드 베이스 중 1/5은 테스트로 커버되지 않는다는 의미

100%라고 해서 모든 가능성을 테스트했음을 의미하진 않으며, 코드 커버리지가 높을수록 버그의 가능성은 낮아진다.

모킹 : 테스트 코드를 의존성으로부터 분리한다. 서버에서 데이터가 왔다고 가정하며 웹앱의 기능을 테스트할수 있다.

백엔드 개발이 늦어질 때, 프론트 개발의 병목현상을 방지한다.

JEST는 모킹 기능을 별도 설치 없이 사용 가능하고, 스냅샷 테스팅을 통해 코드 베이스 변경사항에 따른 DOM 회귀여부를 확인 가능하다.

