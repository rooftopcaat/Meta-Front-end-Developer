1. 함수형 프로그래밍(FP)

모든 언어에는 다양한 스타일이 있으며 동일한 기능을 수행한다. 컴퓨터 언어도 마찬가지로, 이를 프로그래밍 패러다임이라 한다.

인간 언어와 마찬가지로, 어떤 스타일이 다른 스타일보다 더 적합하다고 할 수 없다.

흔히 사용되는 패러다임으로는 FP(함수), OOP(객체) 지향형이 있다.

이러한 패러다임을 코드를 작성하는 다른 접근 방식으로 생각할 수 있지만, 결과는 여전히 컴퓨터에 일련의 작업을 수행하도록 지시하는 것입니다.

함수형 프로그래밍 스타일에는 데이터와 함수 사이에 명확한 구분이 있습니다. 데이터는 함수 외부에서 존재할 수 있습니다. 예를 들어, 함수에 데이터가 필요할 때 인수 형태로 값을 전달하고, 그런 다음 함수는 주어진 데이터에서 작업을 수행하고 결과 값을 반환하여 프로그램의 다른 곳에서 사용할 수 있습니다. 대안적인 패러다임은 데이터와 함수를 객체에 결합하는 객체 지향 프로그래밍 패러다임입니다.

화폐 변환을 계산하는 FP 예제

// 데이터 초기화
var currencyOne = 100;  // 첫 번째 화폐 금액
var currencyTwo = 0;    // 두 번째 화폐 금액, 초기값은 0
var exchangeRate = 1.2; // 환율, 1.2로 설정

// 화폐 변환 함수
function convertCurrency(amount, rate) {
    return amount * rate;
}

// currencyOne과 exchangeRate를 사용하여 currencyTwo 업데이트
currencyTwo = convertCurrency(currencyOne, exchangeRate);
// 결과 테스트
console.log(currencyTwo); // 120이 출력될 것입니다, 100 * 1.2의 결과


이 페이지는 함수에서 반환 값에 대해 설명하고 있으며, JavaScript에서 많은 함수들이 기본적으로 `undefined` 값을 반환한다고 언급하고 있습니다. `console.log()` 함수를 예로 들고 있는데, 이 함수는 출력을 수행한 후 명시적으로 반환 값을 설정하지 않으면 `undefined`를 반환합니다.

사용자가 자신만의 `consoleLog` 함수를 만들어 `console.log()`와 유사한 기능을 하되, `undefined`를 반환하지 않도록 하였습니다. 이 함수는 전달받은 값을 콘솔에 출력하고 그 값을 반환합니다.

```javascript
// 사용자 정의 consoleLog 함수: 값을 콘솔에 로그하고 반환합니다.
function consoleLog(val) {
  console.log(val);
  return val;
}

// consoleLog 함수 사용 예제
consoleLog('Hello'); // 콘솔에 "Hello"를 출력하고 "Hello"를 반환합니다.
```

함수에서 반환된 값을 이용해 다른 함수에서 사용하는 예시로, 숫자를 두 배로 만드는 `doubleIt` 함수와 값을 속성으로 가지는 객체를 생성하는 `objectMaker` 함수가 소개되었습니다.

```javascript
// 숫자를 두 배로 만드는 함수
function doubleIt(num) {
  return num * 2;
}

// 객체를 생성하는 함수
function objectMaker(val) {
  return { prop: val };
}

// objectMaker 함수에 doubleIt 함수의 결과를 전달하는 예제
var resultObject = objectMaker(doubleIt(100)); // { prop: 200 } 값을 가진 객체를 반환합니다.
```

마지막으로, 함수에서 반환된 값을 다른 함수의 입력으로 사용하고, 그 결과를 문자열로 변환하는 등의 연쇄 호출이 가능함을 보여주는 코드가 있습니다.

```javascript
// 연쇄 호출 예제: doubleIt 함수의 결과를 문자열로 변환
var doubleString = doubleIt(10).toString(); // "20" 문자열 반환

// 사용자 정의 함수를 결합한 연쇄 호출
console.log(objectMaker(doubleIt(100))); // 콘솔에 { prop: 200 }를 출력
```

------------------------------------------------------------------------------------------------------------------------

2. 함수 Calling과 recursion

멈출수 없는 트레드밀은 이상적이지 않다. 자바스크립트의 작업 반복 함수도 유용하지만, 무한히 실행되면 문제가 된다.

```javascript
function example() {
  let counter = 3; // counter를 3으로 초기화
  console.log(counter); // counter 출력
  counter = counter - 1; // counter에서 1을 빼기
  if (counter === 0) return; // counter가 0이면 함수 종료

  example(); // 함수 자체를 다시 호출
}

example(); // 함수 실행
```

이 코드는 `example`이라는 함수를 정의하고 있으며, 함수가 호출될 때마다 `counter`를 출력하고 1씩 감소시키다가 `counter`가 0이 되면 실행을 멈춥니다. 또한, `example` 함수는 자기 자신을 호출하여 무한 루프를 생성할 수 있지만, `if` 조건문을 통해 `counter`가 0이 될 때 함수의 실행을 멈추어 무한 루프를 방지합니다.

함수가 자신을 호출할 때 이것이 재귀라고 알려집니다. 재귀는 루프를 사용하지 않고 반복적인 코드를 실행하는 대안적인 방법입니다.

------------------------------------------------------------------------------------------------------------------------

3. 함수형 프로그래밍 - 2

함수형 프로그래밍(FP) 코드를 작성할 때,

데이터와 기능을 분리하고 데이터를 함수에 전달하여 계산이 필요한 경우에만 사용합니다.

function getDistance(mph, h) {
    return mph * h
}
// 분리되어 있다
var mph = 60;
var h = 2;
var distance = getDistance(mph, h);
// 반환된 새 값이 다른 곳에서 사용된다
console.log(distance)

객체지향 프로그래밍(OOP) 코드를 작성할 때,

데이터와 기능을 객체 내의 속성과 메서드로 그룹화합니다.

var virtualPet = {
    sleepy: true,
    nap: function() {}
}

OOP에서 메서드는 객체 내에 저장된 속성을 업데이트하며 새로운 반환 값을 생성하지 않는다.


virtualPet 객체의 sleepy 속성을 확인하면 true로 설정되어 있다.

그러나 virtualPet 객체의 nap() 메서드에 sleepy 속성 변경값을 넣고 실행한다면?
// 객체 생성
var virtualPet = {
    sleepy: true,
    nap: function() {
        this.sleepy = false
    }
}
console.log(virtualPet.sleepy) // true
virtualPet.nap()
console.log(virtualPet.sleepy) // false

가상 펫이 낮잠을 잔 후엔 sleepy가 false가 된다
즉, OOP는 현실 세계의 객체들을 모델링하는데 도움을 주고 이것은
속성과 데이터의 그룹화가 논리적으로 의미가 있는 객체 내에서 이루어질 때 가장 잘 작동한다.

OOP는 개발자가 실제 세계의 객체 간 관계를 모방하는 데 도움을 줍니다. 따라서 OOP는 작성한 코드에서 솔루션을 도출하는 데 효과적인 접근 방식입

1. 모듈화된 코드 작성을 가능하게 합니다.
2. 재사용 가능하고 유연한 코드

------------------------------------------------------------------------------------------------------------------------

4. 함수의 종류

일급 함수

자바스크립트 함수는 종종 일급 시민(first-class citizens)로 불려진다.

자바스크립트에서 함수는 값이며, 이 관점에서는 문자열이나 숫자와 거의 다를 바가 없다.

다른 함수에 전달할 수 있음
변수에 저장할 수 있음
다른 함수에서 반환할 수 있음

이 세 가지가 가능하다는 뜻이다

function addTwoNums(a, b) {
    console.log(a + b)
}
// 두 수를 더하는 함수

function randomNum() {
    return Math.floor((Math.random() * 10) + 1);
}
// 난수 생성기

function specificNum() { return 42 };
// 특정 숫자 42를 반환하는 함수

var useRandom = true;
// boolean 값
var getNumber;

if(useRandom) {
    getNumber = randomNum
} else {
    getNumber = specificNum
}
// 흥미로운 부분 : useRandom의 값이 true로 설정되면 if문이 실행된다. 그러면 randomNum() 함수의 전체선언이 getNumber 변수에 저장된다
그렇지 않으면 specificNum()함수의 전체선언이 getNumber 변수에 저장된다

addTwoNums(getNumber(), getNumber())

이 개념을 이해하고 고차함수로 넘어가자

고차 함수

자바스크립트에서 고차 함수를 정의하는 "특별한 방법"은 없습니다. 이것은 단순히 언어의 기능입니다. 언어 자체에서 다른 함수에 함수를 전달하거나 다른 함수에서 함수를 반환할 수 있게 해줍니다.

이전 섹션에서 이어진다고 가정하고, 다음 코드를 고려해 보겠습니다. 여기서 addTwoNums() 함수를 고차 함수로 다시 정의합니다.

function addTwoNums(getNumber1, getNumber2) {
    console.log(getNumber1() + getNumber2());
}

addTwoNums 함수는 getNumber1과 2의 입력을 어ᄄᅠᇂ게 처리할 것인지에 대한 설명이라고 할 수 있다.

addTwoNums(specificNum, specificNum); // returned number is 84
addTwoNums(specificNum, randomNum);

순수 함수와 부수효과

function addTwoNums(a, b) {
    console.log(a + b)
}

순수 함수는 동일한 입력값에 동일한 출력값을 갖는다.

순수 함수로 간주되기 위한 또 다른 규칙은 부수 효과(side-effect)가 없어야 합니다. 부수 효과란 함수가 자체 외부를 변경하는 경우를 말합니다.

이는 다음을 포함합니다:

함수 자체 외부에서 변수 값 변경
브라우저 API 호출(심지어 콘솔 자체!)
Math.random() 호출 - 값이 항상 일관되게 반복되지 않기 때문
순수 함수와 불순 함수에 관한 주제는 다소 복잡해질 수 있습니다.

지금은 이 개념이 존재하며 함수형 프로그래밍과 관련이 있다는 것을 알고 있는 것이 충분합니다.

------------------------------------------------------------------------------------------------------------------------

5. var, let, const  [스코프]

스코프와 var, let, const

스코프의 정의와 중요성

스코프는 코드에서 변수 및 함수에 대한 접근 범위를 결정합니다.
프로그램의 다른 부분에서 어떤 부분의 코드에 접근 가능한지를 결정합니다.

스코프 유형

전역 스코프: 함수 외부의 모든 코드를 포함하며 어디서든 접근 가능합니다.
로컬 스코프: 함수 내부의 코드에서만 접근 가능한 스코프입니다.
블록 스코프: 중괄호 {} 내에서 선언된 변수는 해당 블록 내에서만 접근 가능하며 외부 코드에서는 접근할 수 없습니다.

스코프와 변수 선언

ES5에서는 var 키워드를 사용하여 변수를 선언할 때 함수 스코프가 생성됩니다.
ES6에서는 let 및 const 키워드를 사용하여 변수를 선언할 때 블록 스코프가 생성됩니다.

차이점 및 권장 사항

var 변수는 선언 전에도 사용할 수 있으며 같은 변수를 다시 선언할 수 있습니다.
let 및 const 변수는 선언하기 전에 사용할 수 없으며 같은 변수를 다시 선언할 수 없습니다.
변수의 스코프는 선언된 위치에 따라 다르며, let과 const는 블록 스코프를 생성합니다.

변수 선택 권장 사항
ES5에서는 var를 사용했으며, 변수에 대한 제약이 매우 느슨했다.
ES6에서는 let과 const를 권장한다.(더 엄격함)
let: 값이 나중에 변경될 수 있는 경우
const: 값이 변경되지 않을 것으로 확신할 때

**var**:
   - **호이스팅(Hoisting)**: `var`로 선언된 변수는 호이스팅되어 초기화 전에 접근할 수 있지만, 할당 전에 접근하면 `undefined`를 반환합니다.
   - **재선언과 재할당**: `var`로 선언된 변수는 재선언과 재할당이 가능합니다. 이는 변수 값이 의도치 않게 덮어쓰여질 위험을 가지고 있습니다.
   - **스코프(Scope)**: `var`는 함수 스코프입니다. 즉, 함수 내에서 선언된 경우 해당 함수 내에서만 유효하며, 함수 외부에서 선언된 경우 전역 변수가 됩니다.

**let**:
   - **임시적 사각 지대(Temporal Dead Zone, TDZ)**: `let`으로 선언된 변수는 선언 전에 접근할 수 없으며, 접근을 시도하면 참조 오류가 발생합니다.
   - **재선언 금지**: `let`으로 선언된 변수는 재선언할 수 없습니다. 하지만 재할당은 가능합니다.
   - **블록 스코프(Block Scope)**: `let`은 블록 스코프를 가지며, 이는 변수가 선언된 블록(중괄호 `{}`로 둘러싸인 구역) 내에서만 유효하다는 것을 의미합니다.

**const**:
   - **초기화 필수**: `const`로 선언된 변수는 선언과 동시에 초기화해야 합니다. 초기화하지 않으면 문법 오류가 발생합니다.
   - **재할당 금지**: `const`로 선언된 변수는 재할당할 수 없습니다. 이는 변수가 가리키는 값이 상수로서 변하지 않아야 함을 의미합니다. (단, 객체나 배열의 내부 값은 변경할 수 있습니다.)
   - **블록 스코프**: `const`도 `let`처럼 블록 스코프를 가집니다.


`var`는 가장 유연하지만 안전하지 않은 방법이며, `const`는 가장 엄격하며 안전한 방법입니다. `let`과 `const`는 둘 다 현대적인 JavaScript에서 권장되는 방식으로, 변수가 재할당될 필요가 있는지 여부에 따라 선택해 사용하면 좋습니다.

var keyword

console.log(user)
var user = “a”
var user = “c”
console.log(user)

결과값:
undefined
c

let keyword

let user;
console.log(user);

=> SyntaxError

user = “Anna”
console.log(user);

undefined
Anna	let은 재할당 가능

------------------------------------------------------------------------------------------------------------------------

6. 함수형 vs 객체지향형


OOP는 관련 데이터, 기능을 그룹핑하기 위해 객체를 사용해 프로그램을 구성하는 아이디어를 중심으로 돌아간다.

반면 FP는 데이터와 해당 데이터를 처리하는 함수를 분리해야 한다.

신발 한 켤레의 총 비용을 계산하는 코드를 작성하라는 요청이 있다.

이 코드는 신발 가격과 세금 액을 저장하기 위한 변수가 필요하며 총 가격을 계산하는 total price라는 함수가 필요하다.
마지막으로 결과를 출력할 수 있어야 합니다.

함수형 프로그래밍 접근을 사용하면 프로그램의 데이터를 해당 데이터를 처리하는 함수와 분리합니다.

OOP 접근을 사용하면 개체를 생성하고 해당 개체에 관련된 모든 데이터, 변수, 함수 및 출력 문을 저장합니다. 예를 들어, purchase1이라는 개체를 생성합니다.

개체 내의 함수를 메서드라고도 합니다.

var purchase1 = {
	shoes: 100,
	stateTax: 1.2,
	totalPrice: function() {
		var calculation = purchase1.shoes * purchase1.stateTax;
		console.log(‘Total price:’, calculation);	}
}

purchase1 개체에서 total price 메서드에 접근하려면 점 표기법(dot notation)을 사용합니다.

purchase1.totalPrice(); // 120
그런 다음 total price 메서드를 호출하면 purchase1 개체 내의 데이터를 사용하여 신발 가격을 세금과 곱한 결과를 반환합니다(예: 120). 실제로 purchase1 개체가 가지고 있는 모든 데이터에 접근할 수 있습니다. 예를 들어, 점 표기법을 사용하여 신발 가격 데이터와 주세금 데이터에 액세스할 수 있습니다.

OOP 접근을 사용하는 장점 중 하나는 필요한만큼 많은 개체를 생성할 수 있다는 것입니다. 예를 들어, 다른 purchase 개체를 생성하고 purchase2라고 이름을 지을 수 있습니다.

생성한 후에도 이전에 purchase1 개체에서 수행한 것과 같은 방식으로 purchase2 개체에서 total price 메서드에 액세스할 수 있습니다. total price 메서드가 purchase1과 purchase2 개체에서 거의 동일하다는 것을 알 수 있을 것입니다.

var purchase2 = {
	shoes: 50,
	state: 1.2,
	totalPrice: function() {
		var calculation = this.shoes * this.stateTax;
		이 클래스의 shoes, 이 클래스의 stateTax
		console.log(‘Total price:’, calculation);
	}
}

이것은 두 메서드의 요소를 모두 동일하게 만들 수 있다는 것을 의미합니다. 여기서 this생성자가 등장합니다.(this keyword) 이것은 실제로 "이 개체"를 의미합니다. 코드는 여전히 이전과 완전히 동일하게 작동함에 유의해야 합니다.
this를 사용하면 각 속성에 액세스하기 위한 개체의 이름을 생각할 필요가 없다는 장점이 있다.

그러나 코드는 항상 간결하고 낭비가 적어야 한다. 이 문제에 대한 해결책은 클래스(class)라고 하는 것을 사용하는 것이다.

------------------------------------------------------------------------------------------------------------------------

7. 클래스

클래스는 원하는 종류의 새 객체를 원하는 만큼 반복해서 만들 수 있는 청사진(blueprint) 역할을 합니다.

class 키워드를 사용하며, 이름은 대문자로 시작하고 중괄호 쌍으로 묶인 클래스의 이름으로 시작한다

중괄호 내부에는 필요한 만큼 많은 매개변수를 받는 생성자 함수가 있습니다. 생성자 함수의 역할은 전달된 매개변수를 향후 객체의 속성에 할당하는 것입니다.

class Car {
	//필요한 만큼의 매개변수를 받는 생성자 함수
	//전달된 매개변수를 향후 객체 속성에 할당하는 것이
	//생성자 함수의 역할이다
	constructor(color, speed) {
		this.color = color;
		this.speed = speed;
	//생성자 함수 정의 후엔 원하는 만큼의 메서드 추가 가능
	turboOn() {
		console.log(“Turbo On!”)
	}
	//여기서는 함수 키워드를 사용하지 않고 메서드의 이름만 필요
	}
}
//객체의 메서드, 속성에 액세스하기 위한 인스턴스
car1.turboOn();

------------------------------------------------------------------------------------------------------------------------

8. OOP의 4원칙

⭐객체는 계층 구조 속에서 존재한다. 모든 것의 원본/슈퍼 클래스는 Object 클래스이며 모든 객체는 이 클래스에서 파생된다. 이로써 우리는 Object.create() 메서드를 활용해 클래스의 객체를 생성하거나 인스턴스화 할 수 있다.

class Animal { /* ...class code here... */ }

var myDog = Object.create(Animal)

console.log (Animal)

클래스에서 객체를 만드는 더 일반적인 방법은 'new' 키워드를 사용하는 것입니다. 기본 또는 빈 생성자 메서드를 사용할 때, JavaScript는 암시적으로 Object 슈퍼클래스를 호출하여 인스턴스를 생성합니다.

class Animal { /* ...class code here... */ }

var myDog = new Animal()

console.log (Animal)

⭐상속

class Animal { /* ...class code here... */ }
class Bird extends Animal { /* ...class code here... */ }
class Eagle extends Bird { /* ...class code here... */ }

extends 키워드를 통해 부모 클래스의 속성을 가져와 사용하거나 중첩시킬 수 있다

⭐캡슐화

다른 사용자는 내 코드가 어떻게 작동하는지 알 필요 없이 코드를 “소비”할 수 있어야 한다.

"abc".toUpperCase();

toUpperCase() 메서드의 내부 구문, 즉 toUpperCase() 메서드의 구현이 변경되더라도 내 코드를 깨뜨리지 않는 한, 그것이 백그라운드에서 무엇을 하는지 신경 쓸 필요가 없습니다. 그리고 어떻게 작동하는지에 대해서도 신경 쓸 필요가 없습니다.

⭐추상화

추상화는 특정 개념의 구체적인 표현이 아니라, 당신이 하려는 작업의 개념을 구체적인 코드로 추출하는 것입니다.
(혼동 가능)
캡슐화는 어떤 구현이 내부적으로 어떻게 작동하는지에 대한 접근 권한이나 관심이 없는 것입니다.

⭐다형성

다형성(Polymorphism)은 그리스어에서 유래한 단어로 "다양한 형태"를 의미합니다. 다른 번역으로는 "여러 가지 형태를 가질 수 있는 것"으로 해석할 수 있을 것입니다.

그래서 다형성이 무엇인지 이해하기 위해 현실 세계의 몇 가지 객체를 생각해봅시다.

문은 벨을 가지고 있습니다. 이 벨은 문 객체의 속성이라고 할 수 있습니다. 이 벨은 울릴 수 있습니다. 누가 문의 벨을 울릴까요? 당연히 누군가에게 문 앞에 나타나라고 요청하기 위해 벨을 울릴 것입니다.

이제 자전거의 벨을 고려해보세요. 자전거에는 벨이 있습니다. 이 벨도 자전거 객체의 속성이라고 할 수 있습니다. 그러나 자전거의 벨을 울리는 이유, 의도 및 결과는 문의 벨을 울리는 것과는 다릅니다.

const bicycle = {
    bell: function() {
        return "Ring, ring! Watch out, please!"
    }
}
const door = {
    bell: function() {
        return "Ring, ring! Come here, please!"
    }
}

bicycle.bell(); // "Get away, please"
door.bell(); // "Come here, please“

이 시점에서, 동일한 메서드 이름이 사용되는 객체에 따라 정확히 반대의 의도를 가질 수 있음을 결론지을 수 있습니다.

좀 더 다형성적으로 코드를 만들기 위해 다른 함수 선언을 추가해봅니다.

function ringTheBell(thing) {
    console.log(thing.bell())
}

이 함수는 thing 매개변수를 받아(자전거 또는 문) 결괏값을 호출합니다

ringTheBell(bicycle); // Ring, ring! Watch out, please!
ringTheBell(door); // "Ring, ring! Come here, please!"



여기 또 다른 예제가 있습니다. 내장 concat() 메소드를 호출하여 사용되는 연결 연산자입니다. 이는 + 연산자를 사용한 것과 정확히 같은 방식으로 동작합니다.

"abc".concat("def"); // 'abcdef’
 // 두 배열에도 적용
["abc"] + ["def"]; // ["abcdef"]
["abc"].concat(["def"]); // ['abc', 'def'] (같은 결과)

다형성을 강조하기 위해, 다형성은 개발자가 정확히 같은 기능을 가진 객체를 구축할 수 있게 해주므로, 정확히 같은 이름을 가진 함수를 가진 객체를 만들고 정확히 같은 방식으로 동작합니다. 그러나 동시에 OOP 구조의 다른 부분에서 공유 기능의 일부를 무시하거나 심지어 완전한 기능을 덮어쓸 수도 있습니다.
class Bird {
    useWings() {
        console.log("Flying!")
    }
}
class Eagle extends Bird {
    useWings() {
        super.useWings()
        console.log("Barely flapping!")
    }
}
class Penguin extends Bird {
    useWings() {
        console.log("Diving!")
    }
}
var baldEagle = new Eagle();
var kingPenguin = new Penguin();
baldEagle.useWings(); // "Flying! Barely flapping!"
kingPenguin.useWings(); // "Diving!“

